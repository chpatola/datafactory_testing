{
	"name": "Create Riding School Transformations",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ClassInput",
						"type": "DatasetReference"
					},
					"name": "classdata"
				},
				{
					"dataset": {
						"referenceName": "ClassHorseStudentInput",
						"type": "DatasetReference"
					},
					"name": "classhorsestudentdata"
				},
				{
					"dataset": {
						"referenceName": "TeacherInput",
						"type": "DatasetReference"
					},
					"name": "teacherdata"
				},
				{
					"dataset": {
						"referenceName": "StudentInput",
						"type": "DatasetReference"
					},
					"name": "studentdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "RidingSchoolOutput",
						"type": "DatasetReference"
					},
					"name": "FinishedFact"
				}
			],
			"transformations": [
				{
					"name": "JoinClassHorseStudent"
				},
				{
					"name": "JoinTeacher"
				},
				{
					"name": "JoinStudent"
				},
				{
					"name": "StudentAgeGroup"
				},
				{
					"name": "CostTurnoverColumns"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(output(\n\t\tClassID as string,\n\t\tStart as timestamp 'MM-dd-yyyy HH:mm:ss',\n\t\tFinish as timestamp 'MM-dd-yyyy HH:mm:ss',\n\t\tTeacherID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> classdata\nsource(output(\n\t\tClassID as string,\n\t\tStudentID as string,\n\t\tHorseName as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> classhorsestudentdata\nsource(output(\n\t\tID as string,\n\t\tName as string,\n\t\tHourlySalary as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> teacherdata\nsource(output(\n\t\tID as string,\n\t\tName as string,\n\t\tBornYear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> studentdata\nclassdata, classhorsestudentdata join(classdata@ClassID == classhorsestudentdata@ClassID,\n\tjoinType:'inner',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> JoinClassHorseStudent\nJoinClassHorseStudent, teacherdata join(TeacherID == ID,\n\tjoinType:'left',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> JoinTeacher\nJoinTeacher, studentdata join(StudentID == studentdata@ID,\n\tjoinType:'inner',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> JoinStudent\nJoinStudent derive(StudentAgeGroup = case(year(currentDate()) - BornYear> 17,'Adult','Child'),\n\tpartitionBy('hash', 1)) ~> StudentAgeGroup\nStudentAgeGroup derive(ClassDurationHour =  hour(toTimestamp(Finish -Start)),\n\t\tUnitCost = hour(toTimestamp(Finish -Start) ) * HourlySalary,\n\t\tUnitTurnover = case( StudentAgeGroup== 'Adult', hour(toTimestamp(Finish -Start) ) * 39, hour(toTimestamp(Finish -Start) ) * 30),\n\t\tUnitProfit = case( StudentAgeGroup== 'Adult', hour(toTimestamp(Finish -Start) ) * 39, hour(toTimestamp(Finish -Start) ) * 30) - hour(toTimestamp(Finish -Start) ) * HourlySalary) ~> CostTurnoverColumns\nCostTurnoverColumns select(mapColumn(\n\t\tClassStart = Start,\n\t\tClassFinish = Finish,\n\t\tTeacherID,\n\t\tStudentID,\n\t\tHorseName,\n\t\tTeacherName = teacherdata@Name,\n\t\tTeacherHourlySalary = HourlySalary,\n\t\tStudentName = studentdata@Name,\n\t\tStudentAgeGroup,\n\t\tClassDurationHour,\n\t\tUnitCost,\n\t\tUnitTurnover,\n\t\tUnitProfit\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['RidingSchoolFact.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> FinishedFact"
		}
	}
}